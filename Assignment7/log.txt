Name: Crystal Rivera
UID: 904481468
Email: crystalarivera@g.ucla.edu
Professor: Eggert
TA: Mushi Zhou
File - log.txt - Describes steps taken in lab in order to able to 
reproduce your work later, if need be.

Check if sort version is new enough 
$ export PATH=/usr/local/cs/bin:$PATH
$ sort --version
sort (GNU coreutils) 8.24

Create a file with 10,000,000 random double-precision floating point numbers
on a new line each. Use od (object dump) with the -tf option for floating 
point, -N 80000000 for 10,000,000 numbers, since -N takes the number of 
bytes, and each double is 8 bytes. Format it to remove the addresses using 
sed 's/^[0-7]* *//' to remove all octal numbers and spaces from the start 
and then tr from ' ' to '\n' to put it all on newlines.
$ od -tf -N 80000000 < /dev/urandom | sed 's/^[0-7]* *//' | tr -s ' ' '\n' 
> many.txt

Use time -p to time the command sort -g on that data, with the output sent 
to /dev/null. Invoke sort with the --parallel option as well as the -g 
option, and run your benchmark with 1, 2, 4, and 8 threads

$ time -p sort -g many.txt > /dev/null
real 40.44
user 216.08
sys 0.38

$ time -p sort -g --parallel=1 many.txt > /dev/null
real 180.21
user 179.97
sys 0.24

$ time -p sort -g --parallel=2 many.txt > /dev/null
real 94.05
user 179.67
sys 0.26

$ time -p sort -g --parallel=4 many.txt > /dev/null
real 54.55
user 187.42
sys 0.31

$ time -p sort -g --parallel=8 many.txt > /dev/null
real 38.67
user 215.95
sys 0.40

The general sort and the sort with parallel=8 threads have about the same 
run time while the other commands (1, 2, 4 parallel threads) run much 
slower. We can conclude that the more recent versions on coreutils 8.6 
and higher is multithreaded and uses around 8 threads.
